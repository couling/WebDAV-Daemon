<?xml version="1.0" encoding="utf-8" ?>
<server-config xmlns="http://couling.me/webdavd">

	<!-- Each <server> will occupy its own process -->
	<!-- At the moment only one server tag can be specified -->
	<server>

		<!-- Each listen port opens an individual listening daemon. There is no 
			default port. Default host "any ip". Default encryption is "none". The following 
			will listening on all ips and be unencrypted -->

		<!-- One may use socket based activation, as with a systemd .socket unit or inetd.  This
			method has systemd open the port(s) listed in the socket units and it will start
			webdavd only when a connection is made.  The ports, hostnames, UNIX domain socket
			pathnames, interfaces bound to, and other options, many of which webdavd does not
			support natively, are set in the systemd socket unit(s), see systemd.socket(5).

			When using this, the port and host in a listen section will be ignored and may be
			omitted.  The port(s) from the socket units will be matched to the listen section(s)
			in order.  Or, FileDescriptorName can be specified in the system socket units and a
			matching <name> specified in the <listen> section(s).  -->
		<!-- <socket-activation /> -->

		<listen>

			<port>80</port>

			<!-- A host tag will bind the server to listen on that IP. Domains will 
				be convertied to an IP before binding. -->
			<!-- <host>myHost.domain.tld</host> -->

			<!-- When using socket based activation, described near the socket-activation tag,
				the port and host above are not used.  A name can be specified here and will
				be matched to the "FileDescriptorName" in the systemd socket unit.  -->
			<name>http</name>

			<encryption>none</encryption>

			<!-- It is NOT recomended to host content on unencrypted chanels. So this 
				port will just forward to an encrypted one -->

			<forward-to>

				<port>443</port>

				<!-- Forwarding by default forwards to the same domain as the request. 
					If you want to specify a static domain then set it here -->
				<!-- <host>another-domain.tld</host> -->

				<!-- Is the client being forwarded to http ("none") or https ("ssl"). 
					The following defaults to "ssl" if fowarding to port 443 and "none" for all 
					other ports -->
				<!-- <encryption>ssl</encryption> -->

			</forward-to>

		</listen>


		<!-- The following will listen on all ips and be encrypted -->
		<listen>

			<port>443</port>

			<!-- When using socket activation, match name from socket unit and ignore port. -->
			<name>https</name>

			<!-- Only "none" and "ssl" are currently supported. Encrypting with SSL 
				requires one or more <ssl-cert> certificates (see below) -->

			<encryption>ssl</encryption>

		</listen>


		<!-- The authenticated session life span (has secirity implications). Sessions 
			will stay open for this length of time and user/passwords matching the session 
			may not be checked with PAM. For this reason it is best to leave this open 
			only for a few minutes incase the system password changes. default: 5:00 
			Supports format: [[[hours:]minutes:]seconds] -->
		<session-timeout>5:00</session-timeout>

		<!-- Chroot the server before serving requests.  This can be set ~, or a path beginning with
			~/ and then followed by additional directories, forcing the server to chroot to the
			user's home directory, or a subdirectory of it, per request.  Alternatively a static
			path can be specified.  -->
		<chroot-path>~</chroot-path>

		<!-- mime.types file default /etc/mime.types -->
		<mime-file>/etc/mime.types</mime-file>

		<!-- The location of the rap binary. DO NOT CHANGE UNLESS YOU KNOW WHAT 
			YOU ARE DOING! This is primarily here for testing but on non-standard systems 
			where binaries can not be stored in /usr/lib/webdav this will need to be changed to 
			the location of "webdav-rap" -->
		<!-- <rap-binary>/usr/lib/webdavd/webdav-worker</rap-binary> -->

		<!-- If a RAP hangs the thread waiting on it will wait this long before 
			giving up -->
		<rap-timeout>2:00</rap-timeout>

		<!-- The service name for PAM. This corresponds to a file of the same name 
			in /etc/pam.d/ on linux systems. default webdavd -->
		<pam-service>webdavd</pam-service>

		<!-- Directory containing static error responses default /usr/share/webdavd. 
			Again this should only be changed on non-standard sytems or for testing when 
			the files can not be placed in /usr/share/webdavd -->
		<!-- <static-response-dir>/usr/share/webdavd</static-response-dir> -->
		
		<!-- The maximum amount of time before a lock expires automatically -->
		<max-lock-time>2:00</max-lock-time>

		<!-- File location for logs. If not specified or left blank the error log 
			will print to stdout and the access log to stderr -->
		<error-log>/var/log/webdav-error.log</error-log>
		<access-log>/var/log/webdav-access.log</access-log>

		<!-- At least one of these must be configured if you want an SSL encrypted 
			connection. Certificates MUST have a Subject Alternative Name specified. 
			Currently wildcard certificates are not supported. These will be used to 
			determine the correct certificate to provide to a client. During server startup 
			the domain name to certificate ascociation will be written to the error log 
			for information purposes. If a client asks for a domain which is not known 
			then the first <ssl-cert> will be the one returned. -->
		<ssl-cert>

			<!-- The PEM encoded certificate file -->
			<certificate>/etc/ssl/certs/ssl-cert-snakeoil.pem</certificate>

			<!-- If the certificate requires intermediary ca certificates then add 
				as many <chain> nodes as required. These must be added in order starting 
				with the closest to the <certificate> and finishing with the closest to the 
				root ca -->
			<!-- <chain>/etc/ssl/certs/local/chain_server.crt</chain> -->

			<!-- The key for <certificate> -->
			<key>/etc/ssl/private/ssl-cert-snakeoil.key</key>
		</ssl-cert>

		<!-- As required.... -->
		<!-- <ssl-cert> ... </ssl-cert> -->

		<!-- Set "unprotect-options" to true if you would like to make OPTIONS requests
                        available without previous authentication. This might be required for your CORS setup.
			Note that this exposes the features of the server to everyone requesting them. -->
		<!-- <unprotect-options>true</unprotect-options> -->

	</server>
</server-config>
